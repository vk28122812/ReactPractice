{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useLoaderData, Await, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  // const events = data.events;\n  // return <EventsList events={events} />;\n  // return (\n  //   <Suspense fallback={<p style={{textAlign:\"center\"}}>Loading...</p>}>\n  //     <Await resolve={data.events}>\n  //       {(loadedEvents) => <EventsList event={loadedEvents} />}\n  //     </Await>\n  //   </Suspense>\n  // );\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'};\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events\"\n    }), {\n      status: 500\n    });\n    // return json({ message: \"could not fetch events\" }, { status: 500 });\n  } else {\n    // return response;\n    // const resData = await response.json();\n    // return resData.events;\n  }\n}\nexport function loader() {\n  return loadEvents();\n  // return defer({\n  //   events: loadEvents(),\n  // });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","Await","defer","EventsList","Suspense","EventsPage","_s","data","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","message","status","loader","$RefreshReg$"],"sources":["/home/vishal/Desktop/ReactPractice/RoutingApp/frontend/src/pages/EventsPage.jsx"],"sourcesContent":["import { useLoaderData, Await, defer } from \"react-router-dom\";\n\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\n\nfunction EventsPage() {\n  const data = useLoaderData();\n  // const events = data.events;\n  // return <EventsList events={events} />;\n  // return (\n  //   <Suspense fallback={<p style={{textAlign:\"center\"}}>Loading...</p>}>\n  //     <Await resolve={data.events}>\n  //       {(loadedEvents) => <EventsList event={loadedEvents} />}\n  //     </Await>\n  //   </Suspense>\n  // );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'};\n    throw new Response(JSON.stringify({ message: \"Could not fetch events\" }), {\n      status: 500,\n    });\n    // return json({ message: \"could not fetch events\" }, { status: 500 });\n  } else {\n    // return response;\n    // const resData = await response.json();\n    // return resData.events;\n  }\n}\nexport function loader() {\n  return loadEvents();\n  // return defer({\n  //   events: loadEvents(),\n  // });\n}\n"],"mappings":";AAAA,SAASA,aAAa,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAE9D,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAEhC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGP,aAAa,CAAC,CAAC;EAC5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAACM,EAAA,CAXQD,UAAU;EAAA,QACJL,aAAa;AAAA;AAAAQ,EAAA,GADnBH,UAAU;AAanB,eAAeA,UAAU;AAEzB,eAAeI,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAyB,CAAC,CAAC,EAAE;MACxEC,MAAM,EAAE;IACV,CAAC,CAAC;IACF;EACF,CAAC,MAAM;IACL;IACA;IACA;EAAA;AAEJ;AACA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACvB,OAAOT,UAAU,CAAC,CAAC;EACnB;EACA;EACA;AACF;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}