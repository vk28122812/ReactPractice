{"ast":null,"code":"// import {createStore} from 'redux';\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter += action.payload.amount;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authInitialState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: authInitialState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//     if(action.type==='increment'){\n//         return {\n//             ...state,\n//             counter: state.counter + 1\n//         }\n//     }\n//     if(action.type ==='increase'){\n//         return {\n//             ...state,\n//             counter: state.counter + action.amount\n//         }\n//     }\n//     if(action.type==='decrement'){\n//         return {\n//             counter: state.counter - 1\n//         }\n//     }\n//     if(action.type ==='toggle'){\n//         return {\n//             ...state,\n//             showCounter: !state.showCounter\n//         }\n//     }\n//     return state;\n// }\n// const store = createStore(counterReducer);\n\nconst counterSubscriber = () => {\n  let latestState = store.getState();\n  // console.log(latestState);\n};\nstore.subscribe(counterSubscriber);\n\n// store.dispatch({type:'increment'});\n// store.dispatch({type:'decrement'});\n\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","amount","toggle","authInitialState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterSubscriber","latestState","getState","subscribe","counterActions","actions"],"sources":["/home/vishal/Desktop/ReactPractice/Redux/src/store/index.js"],"sourcesContent":["// import {createStore} from 'redux';\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialCounterState = {counter: 0, showCounter:true };\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState : initialCounterState,\n    reducers: {\n        increment(state){\n            state.counter++;\n        },\n        decrement(state){\n            state.counter--;\n        },\n        increase(state,action){\n            state.counter += action.payload.amount\n        },\n        toggle(state){\n            state.showCounter = !state.showCounter\n        }\n    }\n});\n\nconst authInitialState = {\n    isAuthenticated: false\n}\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState: authInitialState,\n    reducers: {\n        login(state){\n            state.isAuthenticated = true;\n        },\n        logout(state){\n            state.isAuthenticated = false;\n        }\n    }\n})\n\n\n\n\nconst store = configureStore({\n    reducer : {counter : counterSlice.reducer, auth: authSlice.reducer}\n})\n\n// const counterReducer = (state = initialState, action) => {\n//     if(action.type==='increment'){\n//         return {\n//             ...state,\n//             counter: state.counter + 1\n//         }\n//     }\n//     if(action.type ==='increase'){\n//         return {\n//             ...state,\n//             counter: state.counter + action.amount\n//         }\n//     }\n//     if(action.type==='decrement'){\n//         return {\n//             counter: state.counter - 1\n//         }\n//     }\n//     if(action.type ==='toggle'){\n//         return {\n//             ...state,\n//             showCounter: !state.showCounter\n//         }\n//     }\n//     return state;\n// }\n// const store = createStore(counterReducer);\n\n\nconst counterSubscriber =  () => {\n    let latestState  = store.getState();\n    // console.log(latestState);\n}\nstore.subscribe(counterSubscriber);\n\n\n// store.dispatch({type:'increment'});\n// store.dispatch({type:'decrement'});\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAC;AAAK,CAAC;AAC3D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAGL,mBAAmB;EAClCM,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAC;MACZA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAACG,MAAM,EAAC;MAClBH,KAAK,CAACP,OAAO,IAAIU,MAAM,CAACC,OAAO,CAACC,MAAM;IAC1C,CAAC;IACDC,MAAMA,CAACN,KAAK,EAAC;MACTA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMa,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AACD,MAAMC,SAAS,GAAGnB,WAAW,CAAC;EAC1BM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEU,gBAAgB;EAC9BT,QAAQ,EAAE;IACNY,KAAKA,CAACV,KAAK,EAAC;MACRA,KAAK,CAACQ,eAAe,GAAG,IAAI;IAChC,CAAC;IACDG,MAAMA,CAACX,KAAK,EAAC;MACTA,KAAK,CAACQ,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;AAKF,MAAMI,KAAK,GAAGrB,cAAc,CAAC;EACzBsB,OAAO,EAAG;IAACpB,OAAO,EAAGE,YAAY,CAACkB,OAAO;IAAEC,IAAI,EAAEL,SAAS,CAACI;EAAO;AACtE,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAME,iBAAiB,GAAIA,CAAA,KAAM;EAC7B,IAAIC,WAAW,GAAIJ,KAAK,CAACK,QAAQ,CAAC,CAAC;EACnC;AACJ,CAAC;AACDL,KAAK,CAACM,SAAS,CAACH,iBAAiB,CAAC;;AAGlC;AACA;;AAEA,OAAO,MAAMI,cAAc,GAAGxB,YAAY,CAACyB,OAAO;AAClD,eAAeR,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}